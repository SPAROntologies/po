@prefix : <http://purl.org/spar/po/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix owl2xml: <http://www.w3.org/2006/12/owl2-xml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrlb: <http://www.w3.org/2003/11/swrlb#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

dc:creator a owl:AnnotationProperty .

dc:date a owl:AnnotationProperty .

dc:description a owl:AnnotationProperty .

dc:title a owl:AnnotationProperty .

<http://purl.org/spar/po> a owl:Ontology ;
    rdfs:label "pattern ontology"@en ;
    dc:creator "Angelo Di Iorio"^^xsd:string,
        "Fabio Vitali"^^xsd:string,
        "Silvio Peroni"^^xsd:string ;
    dc:date "2013-07-16" ;
    dc:description """The idea of using patterns to produce reusable and high-quality assets is not new in the literature. Software engineers, architects (as Alexander who first introduced this term) and designers very often use – or rather reuse – patterns to handle problems which recur over and over. Patterns have also been studied to modularize and customize web ontologies (http://ontologydesignpatterns.org). They guarantee the flexibility and maintainability of concepts and solutions in several heterogeneous scenarios.

We've been investigating patterns for XML documents for some time. The overall goal of this research is to understand how the structure of digital documents can be segmented into atomic components, that can be manipulated independently and re-flowed in different contexts. Instead of defining a large number of complex and diversified structures, we have identified a small number of structures/patterns that are sufficient to express what most users need. Our idea is that a low number of patterns are enough to capture the most relevant document structures."""@en ;
    dc:title """The Pattern Ontology
Describing documents by means of their structural components"""@en ;
    rdfs:comment "An ontology defining formally patterns for segmenting a document into atomic components, in order to be manipulated independently and re-flowed in different contexts."@en ;
    owl:backwardCompatibleWith <http://dwellonit.svn.sourceforge.net/viewvc/dwellonit/StructuralPattern/Pattern-1_4.owl> ;
    owl:priorVersion <http://dwellonit.svn.sourceforge.net/viewvc/dwellonit/StructuralPattern/Pattern-1_4.owl> ;
    owl:versionInfo "1.4.2"^^xsd:string .

rdfs:comment a owl:AnnotationProperty .

rdfs:label a owl:AnnotationProperty .

owl:versionInfo a owl:AnnotationProperty .

:HeadedContainer a owl:Class ;
    rdfs:label "headed-container element"@en ;
    rdfs:comment "This class describes container elements whose content model need to begin with one or more block elements (the heading), specified through the property containsAsHeader."@en ;
    rdfs:subClassOf [ a owl:Class ;
            owl:intersectionOf ( :Container [ a owl:Restriction ;
                        owl:allValuesFrom :Block ;
                        owl:onProperty :containsAsHeader ] ) ] .

:containsAsHeader a owl:ObjectProperty ;
    rdfs:label "contains as header"@en ;
    rdfs:comment "A structured element contains another generic element as part of its header."@en ;
    rdfs:subPropertyOf :contains ;
    owl:inverseOf :isContainedByAsHeader .

:isContainedByAsHeader a owl:ObjectProperty ;
    rdfs:label "is contained by as header"@en ;
    rdfs:comment "An element is contained by another structured element as part of its header."@en ;
    rdfs:subPropertyOf :isContainedBy .

owl:Thing a owl:Class .

:Atom a owl:Class ;
    rdfs:label "atom element"@en ;
    rdfs:comment "This class is defined to describe literal text that is part of the document body. Moreover, similarly to Inline, elements following the Atom pattern can only be contained within block or inline elements (and consequently they also cannot be used as root elements of documents). It can contain textual content and no other elements."@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isContainedBy ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Inline ) ] ] ;
    owl:disjointWith :Field ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Flat [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Block :Inline ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:Bucket a owl:Class ;
    rdfs:label "bucket element"@en ;
    rdfs:comment "The class of elements that can contain other elements but no text nodes."@en ;
    rdfs:subClassOf :NonTextual,
        :Structured ;
    owl:disjointWith :Marker .

:Flat a owl:Class ;
    rdfs:label "flat element"@en ;
    rdfs:comment "The class of elements that can contain text nodes but no elements."@en ;
    rdfs:subClassOf :NonStructured,
        :Textual ;
    owl:disjointWith :Mixed .

:NonStructured a owl:Class ;
    rdfs:label "non-structured element"@en ;
    rdfs:comment "The class of elements that cannot contain other elements."@en ;
    rdfs:subClassOf :Pattern ;
    owl:disjointWith :Structured ;
    owl:equivalentClass [ a owl:Class ;
            owl:complementOf :Structured ] .

:NonTextual a owl:Class ;
    rdfs:label "non-textual element"@en ;
    rdfs:comment "The class of elements that cannot have textual content in their content models."@en ;
    rdfs:subClassOf :Pattern ;
    owl:disjointWith :Textual ;
    owl:equivalentClass [ a owl:Class ;
            owl:complementOf :Textual ] .

:g a swrl:Variable .

:t a swrl:Variable .

:z a swrl:Variable .

<urn:swrl#s> a swrl:Variable .

<urn:swrl#x> a swrl:Variable .

<urn:swrl#y> a swrl:Variable .

:Marker a owl:Class ;
    rdfs:label "marker element"@en ;
    rdfs:comment "The class of elements that can contain neither text nodes nor elements."@en ;
    rdfs:subClassOf :NonStructured,
        :NonTextual .

:Mixed a owl:Class ;
    rdfs:label "mixed element"@en ;
    rdfs:comment "The class of elements that can contain other elements and text nodes."@en ;
    rdfs:subClassOf :Structured,
        :Textual .

:p a swrl:Variable .

<urn:swrl#p> a swrl:Variable .

:Meta a owl:Class ;
    rdfs:label "meta element"@en ;
    rdfs:comment "This class describes elements that contain neither other elements nor textual content. Contrarily to the pattern Milestone, which was meant to describe markup elements that impact the document because of their location, the main feature of its disjoint sibling is the mere existence, independently from the position it has within the document. Meta elements convey metadata information about the document or part of it, independently of where they are. Thus, meta elements can be contained only within container elements."@en ;
    owl:disjointWith :Milestone ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Marker [ a owl:Restriction ;
                        owl:onProperty :isContainedBy ;
                        owl:someValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Container :Popup ) ] ] ) ] .

:Record a owl:Class ;
    rdfs:label "record element"@en ;
    rdfs:comment "This class describes container elements that can only contain heterogeneous and non repeatable elements."@en ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Container [ a owl:Restriction ;
                        owl:hasValue true ;
                        owl:onProperty :canContainHeteronymousElements ] [ a owl:Restriction ;
                        owl:hasValue false ;
                        owl:onProperty :canContainHomonymousElements ] ) ] .

:canContainHeteronymousElements a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "can contain heteronymous elements"@en ;
    rdfs:comment "A hierarchical-based entity contains al least two entities having different names."@en ;
    rdfs:domain :Structured ;
    rdfs:range xsd:boolean .

:canContainHomonymousElements a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "can contain homonymous elements"@en ;
    rdfs:comment "A hierarchical-based entity contains al least two entities that share the same name."@en ;
    rdfs:domain :Structured ;
    rdfs:range xsd:boolean .

:Field a owl:Class ;
    rdfs:label "field element"@en ;
    rdfs:comment "This class is defined to describe literal metadata or text that is not really part of the document body, contrarily to its disjointed sibling Atom. Its main difference with Meta is that Field can contain textual content."@en ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Flat [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Container :Popup ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:Milestone a owl:Class ;
    rdfs:label "milestone element"@en ;
    rdfs:comment """This class describe elements that contain neither other elements nor textual content. Moreover, similarly to Inline, elements following the Milestone pattern can only be contained within block or inline elements (and consequently they also cannot be used as root elements of documents).

The distinctive characteristic of the pattern Milestone is the location it assumes within the document."""@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isContainedBy ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Inline ) ] ] ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Marker [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Block :Inline ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:Pattern a owl:Class ;
    rdfs:label "pattern-based element"@en ;
    rdfs:comment """A structural pattern is an atomic component of a document, that is able to capture a recurrent and well knwon structure of a document.

Any entity belonging to this class is compliant with exactly one structural pattern."""@en ;
    rdfs:subClassOf owl:Thing .

:Table a owl:Class ;
    rdfs:label "table element"@en ;
    rdfs:comment "This class describes container elements that must contain only homogeneous elements (but they can be repeated)."@en ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Container [ a owl:Restriction ;
                        owl:hasValue false ;
                        owl:onProperty :canContainHeteronymousElements ] [ a owl:Restriction ;
                        owl:hasValue true ;
                        owl:onProperty :canContainHomonymousElements ] ) ] .

:Textual a owl:Class ;
    rdfs:label "textual element"@en ;
    rdfs:comment "The class of elements that can have textual content in their content models."@en ;
    rdfs:subClassOf :Pattern .

:Popup a owl:Class ;
    rdfs:label "popup element"@en ;
    rdfs:comment "This class defines bucket elements that are only present within block and inline elements. Popup elements are used whenever complex structures need to be placed within content elements such as paragraphs. "@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isContainedBy ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Inline ) ] ],
        [ a owl:Restriction ;
            owl:allValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Container :Field :Meta ) ] ;
            owl:onProperty :contains ] ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Bucket [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Block :Inline ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:Structured a owl:Class ;
    rdfs:label "structured element"@en ;
    rdfs:comment "The class of elements that can contain other elements."@en ;
    rdfs:subClassOf :Pattern .

:Container a owl:Class ;
    rdfs:label "container element"@en ;
    rdfs:comment "This class concerns the structural organization of a document. Elements following this pattern contain no textual content and contain only elements compliant with the patterns: Meta, Field, Block and any subtype of Container. It is disjointed with the pattern Popup, although they share the same content model."@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:allValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Container :Field :Meta ) ] ;
            owl:onProperty :contains ] ;
    owl:disjointWith :Popup ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Bucket [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Container :Popup ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:contains a owl:ObjectProperty ;
    rdfs:label "contains"@en ;
    rdfs:comment "A structured element contains another generic element."@en ;
    rdfs:domain :Structured ;
    owl:inverseOf :isContainedBy .

:Block a owl:Class ;
    rdfs:label "block element"@en ;
    rdfs:comment "This class organise the document content as a sequence of nestable elements and text nodes. In particular, elements following this pattern can contain text and other elements compliant with the patterns Inline, Atom, Milestones and Popup, which will be introduced in the following. Furthermore, it is a requirement that block elements are contained only by container and popup elements"@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:allValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Atom :Inline :Milestone :Popup ) ] ;
            owl:onProperty :contains ] ;
    owl:disjointWith :Inline ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Mixed [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Container :Popup ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:Inline a owl:Class ;
    rdfs:label "inline element"@en ;
    rdfs:comment """This class has the same use and content model of the pattern Block, but differing primarily because a) inline elements can contain other elements compliant with the same pattern while block elements cannot, and b) inline elements must always be contained by other block or inline elements and by no other type of element.

These constraints also imply that inline elements cannot be used as root elements of documents and that the class Block is disjoint with the class Inline (i.e., a markup element cannot be a block and an inline at the same time)."""@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:allValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Atom :Inline :Milestone :Popup ) ] ;
            owl:onProperty :contains ],
        [ a owl:Restriction ;
            owl:onProperty :isContainedBy ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:unionOf ( :Block :Inline ) ] ] ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Mixed [ a owl:Restriction ;
                        owl:allValuesFrom [ a owl:Class ;
                                owl:unionOf ( :Block :Inline ) ] ;
                        owl:onProperty :isContainedBy ] ) ] .

:isContainedBy a owl:ObjectProperty ;
    rdfs:label "is contained by"@en ;
    rdfs:comment "An element that is contained by another structured element."@en .

:s a swrl:Variable .

:y a swrl:Variable .

:hasName a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "has name"@en ;
    rdfs:comment "The name of a particular element."@en ;
    rdfs:range xsd:string .

:x a swrl:Variable .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 <urn:swrl#p> ;
                    swrl:argument2 <urn:swrl#x> ;
                    swrl:propertyPredicate :contains ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 <urn:swrl#p> ;
                            swrl:argument2 <urn:swrl#y> ;
                            swrl:propertyPredicate :contains ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 <urn:swrl#x> ;
                                    swrl:argument2 <urn:swrl#s> ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                            swrl:argument1 <urn:swrl#y> ;
                                            swrl:argument2 <urn:swrl#s> ;
                                            swrl:propertyPredicate :hasName ] ;
                                    rdf:rest () ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 <urn:swrl#p> ;
                    swrl:argument2 true ;
                    swrl:propertyPredicate :canContainHomonymousElements ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Milestone ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Milestone ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Field ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Field ] ;
            rdf:rest () ] .

[] a owl:AllDisjointClasses ;
    owl:members ( :HeadedContainer :Record :Table ) .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Container ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Container ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Meta ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Meta ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :p ;
                    swrl:argument2 :x ;
                    swrl:propertyPredicate :contains ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :p ;
                            swrl:argument2 :y ;
                            swrl:propertyPredicate :contains ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :x ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                            swrl:argument1 :y ;
                                            swrl:argument2 :t ;
                                            swrl:propertyPredicate :hasName ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:BuiltinAtom ;
                                                    swrl:arguments ( :s :t ) ;
                                                    swrl:builtin swrlb:notEqual ] ;
                                            rdf:rest () ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 :p ;
                    swrl:argument2 true ;
                    swrl:propertyPredicate :canContainHeteronymousElements ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Table ] ;
            rdf:rest () ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 :x ;
                    swrl:argument2 false ;
                    swrl:propertyPredicate :canContainHeteronymousElements ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Pattern ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 :x ;
                            swrl:classPredicate :Textual ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :x ;
                                    swrl:argument2 :g ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                            swrl:argument1 :y ;
                                            swrl:argument2 :g ;
                                            swrl:propertyPredicate :hasName ] ;
                                    rdf:rest () ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Textual ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Record ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Record ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Record ] ;
            rdf:rest () ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 :x ;
                    swrl:argument2 false ;
                    swrl:propertyPredicate :canContainHomonymousElements ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Inline ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Inline ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Table ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y ;
                            swrl:propertyPredicate :contains ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 :x ;
                                    swrl:argument2 :z ;
                                    swrl:propertyPredicate :contains ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                            swrl:argument1 :z ;
                                            swrl:argument2 :s ;
                                            swrl:propertyPredicate :hasName ] ;
                                    rdf:rest () ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 :y ;
                    swrl:argument2 :s ;
                    swrl:propertyPredicate :hasName ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Table ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Table ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :x ;
                    swrl:classPredicate :Block ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:DatavaluedPropertyAtom ;
                            swrl:argument1 :x ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :hasName ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                                    swrl:argument1 :y ;
                                    swrl:argument2 :s ;
                                    swrl:propertyPredicate :hasName ] ;
                            rdf:rest () ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 :y ;
                    swrl:classPredicate :Block ] ;
            rdf:rest () ] .

